//Generated by AheadLib4x64 by Evil0r
#include "pch.h"
#include <Windows.h>
#include <tchar.h>
#include <stdio.h>
#include "TZM.h"
#include <atlstr.h>
#include <string>
#include "HOOK.h"
using namespace std;
VOID InitAddr();


#pragma comment(linker, "/EXPORT:GetFileVersionInfoA=_AheadLib_GetFileVersionInfoA,@1")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoByHandle=_AheadLib_GetFileVersionInfoByHandle,@2")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoExA=_AheadLib_GetFileVersionInfoExA,@3")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoExW=_AheadLib_GetFileVersionInfoExW,@4")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeA=_AheadLib_GetFileVersionInfoSizeA,@5")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeExA=_AheadLib_GetFileVersionInfoSizeExA,@6")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeExW=_AheadLib_GetFileVersionInfoSizeExW,@7")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoSizeW=_AheadLib_GetFileVersionInfoSizeW,@8")
#pragma comment(linker, "/EXPORT:GetFileVersionInfoW=_AheadLib_GetFileVersionInfoW,@9")
#pragma comment(linker, "/EXPORT:VerFindFileA=_AheadLib_VerFindFileA,@10")
#pragma comment(linker, "/EXPORT:VerFindFileW=_AheadLib_VerFindFileW,@11")
#pragma comment(linker, "/EXPORT:VerInstallFileA=_AheadLib_VerInstallFileA,@12")
#pragma comment(linker, "/EXPORT:VerInstallFileW=_AheadLib_VerInstallFileW,@13")
#pragma comment(linker, "/EXPORT:VerLanguageNameA=_AheadLib_VerLanguageNameA,@14")
#pragma comment(linker, "/EXPORT:VerLanguageNameW=_AheadLib_VerLanguageNameW,@15")
#pragma comment(linker, "/EXPORT:VerQueryValueA=_AheadLib_VerQueryValueA,@16")
#pragma comment(linker, "/EXPORT:VerQueryValueW=_AheadLib_VerQueryValueW,@17")
// 宏定义
#define EXTERNC extern "C"
#define NAKED __declspec(naked)
#define EXPORT __declspec(dllexport)

#define ALCPP EXPORT NAKED
#define ALSTD EXTERNC EXPORT NAKED void __stdcall
#define ALCFAST EXTERNC EXPORT NAKED void __fastcall
#define ALCDECL EXTERNC  void __cdecl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AheadLib 命名空间
namespace AheadLib
{
	HMODULE m_hModule = NULL;	// 原始模块句柄
	DWORD m_dwReturn[155] = { 0 };	// 原始函数返回地址


	// 加载原始模块
	inline BOOL WINAPI Load()
	{
		TCHAR tzPath[MAX_PATH];
		TCHAR tzTemp[MAX_PATH * 2];

		GetSystemDirectory(tzPath, MAX_PATH);
		lstrcat(tzPath, TEXT("\\version"));
		m_hModule = LoadLibrary(tzPath);
		if (m_hModule == NULL)
		{
			wsprintf(tzTemp, TEXT("无法加载 %s，程序无法正常运行。"), tzPath);
			MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
		}

		return (m_hModule != NULL);
	}

	// 释放原始模块
	inline VOID WINAPI Free()
	{
		if (m_hModule)
		{
			FreeLibrary(m_hModule);
		}
	}

	// 获取原始函数地址
	FARPROC WINAPI GetAddress(PCSTR pszProcName)
	{
		FARPROC fpAddress;
		CHAR szProcName[16];
		TCHAR tzTemp[MAX_PATH];

		if (m_hModule == NULL)
		{
			if (Load() == FALSE)
			{
				ExitProcess(-1);
			}
		}

		fpAddress = GetProcAddress(m_hModule, pszProcName);
		if (fpAddress == NULL)
		{
			if (HIWORD(pszProcName) == 0)
			{
				wsprintfA(szProcName, "%d", pszProcName);
				pszProcName = szProcName;
			}

			wsprintf(tzTemp, TEXT("无法找到函数 %hs，程序无法正常运行。"), pszProcName);
			MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
			ExitProcess(-2);
		}

		return fpAddress;
	}
}
using namespace AheadLib;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//根据函数特征码扫描获取函数地址并HOOK
bool startHook() {

	//格式化输出中转数组
	char str[100]{};

	//输出结果
	string res = "";
	//接收结果数组
	ULONG64 addr[128] = { 0 };

	//获取当前程序pid
	int pid = _getpid();

	//记录特征码数量
	SIZE_T count = 0;

	//扫描特征码(如果劫持注入只能扫描到静态地址的TZM,因为还没初始化完成)
	count = FindMemoryTZM(pid, addr, sizeof(addr) / 8, (PCHAR)"48 ?? ?? 24 10 48 89 4C 24 08 57 48 81 EC 40 04", 0x0000000000000000, 0x7FFFFFFFFFFF);

	//输出结果地址
	for (int i = 0; i < count; i++)
	{
		//格式化输出
		//cout << hex << uppercase << addr[i] << endl;
		//printf("结果地址：%016I64X\n", addr[i]);
		sprintf_s(str, 100, "%016I64X\n", addr[i]);
		res += str;
		//MessageBox(0, str, "TZM地址:", MB_SYSTEMMODAL);
	}
	switch (count)
	{
	case 0:
		MessageBox(0, "未扫描到特征码", "提示", MB_SYSTEMMODAL);
		return 0;
		break;
	case 1:
		MessageBox(0, "扫描到唯一特征码.开始Hook", "提示", MB_SYSTEMMODAL);
		MessageBox(0, res.c_str(), "TZM地址:", MB_SYSTEMMODAL);
		//HOOK扫描到的函数地址,设置HOOK后要执行的方法
		return Hook((ULONG_PTR)addr[0], (ULONG_PTR)HookFunc);
		break;
	default:
		MessageBox(0, "扫描到多个特征码,取消Hook", "提示", MB_SYSTEMMODAL);
		MessageBox(0, res.c_str(), "TZM地址:", MB_SYSTEMMODAL);
		return 0;
		break;
	}
	return 0;
}





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入口函数
BOOL APIENTRY DllMain(HMODULE hModule,
	DWORD  ul_reason_for_call,
	LPVOID lpReserved
)
{

	switch (ul_reason_for_call)
	{
		//DLL被初次映射到进程的地址空间中的时候触发
	case DLL_PROCESS_ATTACH:
		//用于使指定DLL的DLL_THREAD_ATTACH和DLL_THREAD_DETACH通知无效，这可减少某些应用程序的工作集空间
		DisableThreadLibraryCalls(hModule);
		//初始化函数转发
		for (INT i = 0; i < sizeof(m_dwReturn) / sizeof(DWORD); i++)
		{
			m_dwReturn[i] = TlsAlloc();
		}
		InitAddr();

		//自定义操作
		//提示框(MB_SYSTEMMODAL=置顶)
		MessageBox(0, "劫持DLL成功", "提示", MB_SYSTEMMODAL);
		startHook();

		break;
		//主线程加载DLL后，创建一个新的进程的时候触发
	case DLL_THREAD_ATTACH:

		break;
		//当进程中关闭线程的时候触发
	case DLL_THREAD_DETACH:
		break;
		//当该DLL映像被进程卸载的时候触发
	case DLL_PROCESS_DETACH:

		////释放内存
		for (INT i = 0; i < sizeof(m_dwReturn) / sizeof(DWORD); i++)
		{
			TlsFree(m_dwReturn[i]);
		}
		Free();
		MessageBox(0, "卸载DLL成功", "提示", MB_SYSTEMMODAL);
		//自定义操作
		break;
	}
	return TRUE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define VOIDSTD EXTERNC void __stdcall
#define INT64STD EXTERNC INT64 __stdcall
INT64STD AsmFunc1();
VOIDSTD AsmFunc2(INT64 iRcx);

FARPROC g_GetFileVersionInfoA = NULL;
FARPROC g_GetFileVersionInfoByHandle = NULL;
FARPROC g_GetFileVersionInfoExA = NULL;
FARPROC g_GetFileVersionInfoExW = NULL;
FARPROC g_GetFileVersionInfoSizeA = NULL;
FARPROC g_GetFileVersionInfoSizeExA = NULL;
FARPROC g_GetFileVersionInfoSizeExW = NULL;
FARPROC g_GetFileVersionInfoSizeW = NULL;
FARPROC g_GetFileVersionInfoW = NULL;
FARPROC g_VerFindFileA = NULL;
FARPROC g_VerFindFileW = NULL;
FARPROC g_VerInstallFileA = NULL;
FARPROC g_VerInstallFileW = NULL;
FARPROC g_VerLanguageNameA = NULL;
FARPROC g_VerLanguageNameW = NULL;
FARPROC g_VerQueryValueA = NULL;
FARPROC g_VerQueryValueW = NULL;
VOID InitAddr()
{
	g_GetFileVersionInfoA = GetAddress("GetFileVersionInfoA");
	g_GetFileVersionInfoByHandle = GetAddress("GetFileVersionInfoByHandle");
	g_GetFileVersionInfoExA = GetAddress("GetFileVersionInfoExA");
	g_GetFileVersionInfoExW = GetAddress("GetFileVersionInfoExW");
	g_GetFileVersionInfoSizeA = GetAddress("GetFileVersionInfoSizeA");
	g_GetFileVersionInfoSizeExA = GetAddress("GetFileVersionInfoSizeExA");
	g_GetFileVersionInfoSizeExW = GetAddress("GetFileVersionInfoSizeExW");
	g_GetFileVersionInfoSizeW = GetAddress("GetFileVersionInfoSizeW");
	g_GetFileVersionInfoW = GetAddress("GetFileVersionInfoW");
	g_VerFindFileA = GetAddress("VerFindFileA");
	g_VerFindFileW = GetAddress("VerFindFileW");
	g_VerInstallFileA = GetAddress("VerInstallFileA");
	g_VerInstallFileW = GetAddress("VerInstallFileW");
	g_VerLanguageNameA = GetAddress("VerLanguageNameA");
	g_VerLanguageNameW = GetAddress("VerLanguageNameW");
	g_VerQueryValueA = GetAddress("VerQueryValueA");
	g_VerQueryValueW = GetAddress("VerQueryValueW");
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoA(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoA);
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoByHandle(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoByHandle);
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoExA(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoExA);
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoExW(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoExW);
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoSizeA(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoSizeA);
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoSizeExA(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoSizeExA);
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoSizeExW(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoSizeExW);
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoSizeW(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoSizeW);
}
// 导出函数
ALCDECL _AheadLib_GetFileVersionInfoW(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_GetFileVersionInfoW);
}
// 导出函数
ALCDECL _AheadLib_VerFindFileA(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_VerFindFileA);
}
// 导出函数
ALCDECL _AheadLib_VerFindFileW(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_VerFindFileW);
}
// 导出函数
ALCDECL _AheadLib_VerInstallFileA(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_VerInstallFileA);
}
// 导出函数
ALCDECL _AheadLib_VerInstallFileW(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_VerInstallFileW);
}
// 导出函数
ALCDECL _AheadLib_VerLanguageNameA(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_VerLanguageNameA);
}
// 导出函数
ALCDECL _AheadLib_VerLanguageNameW(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_VerLanguageNameW);
}
// 导出函数
ALCDECL _AheadLib_VerQueryValueA(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_VerQueryValueA);
}
// 导出函数
ALCDECL _AheadLib_VerQueryValueW(void)
{
	AsmFunc1();
	AsmFunc2((INT64)g_VerQueryValueW);
}
